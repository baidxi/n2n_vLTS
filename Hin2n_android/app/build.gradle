apply plugin: 'org.greenrobot.greendao'
apply plugin: 'com.android.application'


def getVersionCode = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'rev-list', '--all', '--count'
            standardOutput = stdout
        }
        return Integer.parseInt(stdout.toString().trim())
    }
    catch (ignored) {
        return -1;
    }
}

def getVersionName = { ->
    try {
        def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags', '--always', '--dirty', '--match', 'hin2n_v*'
            standardOutput = stdout
        }
        return stdout.toString().trim()
    }
    catch (ignored) {
        return null;
    }
}

def getEnvOrConsole = { env, prompt ->
    def val = null
    try {
        val = System.getenv(env)
        if (val == null || val == "") {
            if (System.console() != null) {
                val = System.console().readLine("\n" + prompt + ": ")
            }
        }
    } catch (ignored) {
        return null
    }
    return val
}

def getManifestValues = { id_key, variant ->
    def val = true
    def id = getEnvOrConsole(id_key, id_key)
    if (id == null || id == "") {
        gradle.println(id_key + " is not set")
        val = false
    } else {
        if (variant) {
            variant.mergedFlavor.manifestPlaceholders.put(id_key + "_VALUE", id)
        }
    }

    return val
}

def getAllManifestValues = { variant ->
    def v1 = getManifestValues("UMENG_APPKEY", variant)
    def v2 = getManifestValues("BUGLY_APPID", variant)
    def v3 = getManifestValues("SHARE_WX_APPID", variant)
    def v4 = getManifestValues("SHARE_WX_APPSECRET", variant)
    def v5 = getManifestValues("SHARE_WB_APPID", variant)
    def v6 = getManifestValues("SHARE_WB_APPSECRET", variant)

    return v1 && v2
}

android {
    compileSdkVersion 25
    buildToolsVersion '27.0.3'
    defaultConfig {
        applicationId "wang.switchy.hin2n"
        minSdkVersion 15
        targetSdkVersion 25
        versionCode getVersionCode()
        versionName getVersionName()
        multiDexEnabled true //突破方法数65535的限制
        manifestPlaceholders = [UMENG_CHANNEL_VALUE: "normal", ARCH: "all", UMENG_APPKEY_VALUE: "", BUGLY_APPID_VALUE: "",
                                SHARE_WX_APPID_VALUE: "", SHARE_WX_APPSECRET_VALUE: "",
                                SHARE_WB_APPID_VALUE: "", SHARE_WB_APPSECRET_VALUE: ""]
        resConfigs "en", "zh-rCN", "zh-rTW" // 多语言

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        externalNativeBuild {
            cmake {
                cppFlags ""
            }
        }
    }

    //添加我们的签名文件配置 注意：signingConfigs要写在buildTypes
    signingConfigs {
        debug {}

        release {
            //为我们的release包添加签名文件配置
            storeFile file("Hin2n.jks")
            storePassword getEnvOrConsole("HIN2N_KSTOREPWD", "Keystore password")
            keyAlias "Hin2n"
            keyPassword getEnvOrConsole("HIN2N_KEYPWD", "Key password")
        }
    }

    buildTypes {
        debug {
            buildConfigField("boolean", "API_DEBUG", "true")
            minifyEnabled false //是否启用混淆
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

        }

        release {
            buildConfigField("boolean", "API_DEBUG", "false")
            minifyEnabled false //是否启用混淆
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            signingConfig signingConfigs.release
        }
    }

    gradle.taskGraph.beforeTask { Task task ->
        if (task.name.contains("Release")) {
            task.onlyIf {
                return getAllManifestValues()
            }
        }
    }

    //配置自定义打包名称
    applicationVariants.all { variant ->
        getAllManifestValues(variant)
        if (variant.buildType.name == 'debug') {
            variant.mergedFlavor.manifestPlaceholders.UMENG_CHANNEL_VALUE = 'umtest'
        }

        variant.outputs.all { output ->
            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                variant.mergedFlavor.versionName = getVersionName()
                def channel = variant.mergedFlavor.manifestPlaceholders.UMENG_CHANNEL_VALUE
                def arch = variant.mergedFlavor.manifestPlaceholders.ARCH
                def fileName = "${variant.mergedFlavor.versionName}_${channel}_${arch}_${variant.buildType.name}.apk"
                outputFileName = fileName
            }
        }
    }

    flavorDimensions "channel", "arch"

    productFlavors {
        normal {
            dimension "channel"
            manifestPlaceholders += [UMENG_CHANNEL_VALUE: "normal"]
        }
        github {
            dimension "channel"
            manifestPlaceholders += [UMENG_CHANNEL_VALUE: "github"]
        }
        osc {
            dimension "channel"
            manifestPlaceholders += [UMENG_CHANNEL_VALUE: "osc"]
        }
        arm {
            dimension "arch"
            ndk {
                abiFilters "armeabi-v7a", "arm64-v8a"
                manifestPlaceholders += [ARCH: "arm"]
            }
        }
        x86 {
            dimension "arch"
            ndk {
                abiFilters "x86", "x86_64"
                manifestPlaceholders += [ARCH: "x86"]
            }
        }
        allarch {
            dimension "arch"
            ndk {
                abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
                manifestPlaceholders += [ARCH: "allarch"]
            }
        }
    }


    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

}

greendao {
    schemaVersion 1 //版本
    daoPackage 'wang.switchy.hin2n.storage.db.base'// 一般为app包名+生成文件的文件夹名
    targetGenDir 'src/main/java' //生成文件路径
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    androidTestImplementation('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation 'com.android.support:design:25.2.0'
    testImplementation 'junit:junit:4.12'
    implementation 'com.android.support:appcompat-v7:25.+'
    implementation 'org.greenrobot:eventbus:3.1.1'

    //集成调试库，能够帮助用户发现埋点错误，上线前务必删除集成调试库，避免无关信息的打印
    implementation 'com.umeng.sdk:common:latest.integration'
    implementation 'com.umeng.sdk:utdid:1.1.5.3'
    implementation 'com.umeng.sdk:analytics:latest.integration'

    implementation 'org.greenrobot:greendao:3.2.0' // add library
//    implementation 'org.greenrobot:greendao-generator:3.2.2'

    implementation 'com.baoyz.swipemenulistview:library:1.3.0'

    implementation 'com.github.f0ris.sweetalert:library:1.5.1'

    implementation 'com.wang.avi:library:2.1.3'

//    implementation 'com.orhanobut:logger:2.2.0'
    implementation 'com.orhanobut:logger:1.15'

//    implementation 'com.github.traex.rippleeffect:library:1.3'

    implementation 'com.tencent.bugly:crashreport_upgrade:latest.release'
    implementation 'com.tencent.bugly:nativecrashreport:latest.release'
}
